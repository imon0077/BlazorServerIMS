@inject NavigationManager NavigationManager
@inject IDeleteProductUseCase DeleteProductUseCase

@if (item != null)
{
    <tr>
        <td>@item.ProductName</td>
        <td>@item.Quantity</td>
        <td>@item.Price.ToString("c")</td>
        <td>
            <button type="button" class="btn btn-light" @onclick="@(()=> EditData(item.ProductId))"> Edit </button>
            <button type="button" class="btn btn-light" @onclick="@(async ()=> await DeleteData(item))"> Delete </button>
        </td>
    </tr>
}


@code {
    [Parameter]
    public Product item { get; set; } = new Product();

    [Parameter]
    public EventCallback OnProductDeleted { get; set; }

    private void EditData(int productId)
    {
        NavigationManager.NavigateTo($"/editproduct/{productId}");
    }

    private async Task DeleteData(Product product)
    {
        await DeleteProductUseCase.ExecuteAsync(product.ProductId);

        await OnProductDeleted.InvokeAsync();
    }

}
