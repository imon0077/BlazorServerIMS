@page "/editproduct/{id:int}"

@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

<h3>Edit Product</h3>
<br/>

@if (this.product != null){
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>

        <ProductInventoriesComponent 
            productInventories="product.ProductInventories"
            OnInventorySelected="OnInventorySelected">
        </ProductInventoriesComponent>

        <br />

        <button type="submit" class="btn btn-primary">Save</button>

    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Product product = new Product();

    protected override async Task OnParametersSetAsync()
    {
        product = await ViewProductByIdUseCase.ExecuteAsync(this.Id);
    }


    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        this.product.ProductInventories = productInventories;
    }

    public async Task OnValidSubmit(){
        await EditProductUseCase.ExecuteAsync(product);
        NavigationManager.NavigateTo("/products");
    }
}
